from config import TOKEN, QUESTIONS, ANIMALS
import telebot
from telebot import types
from collections import Counter
import logging
from PIL import Image, ImageDraw, ImageFont
import io
import os
import urllib.parse


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='bot_errors.log',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

bot = telebot.TeleBot(TOKEN)
user_data = {}

def generate_animal_image(animal_name, animal_image_path=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    if animal_image_path and os.path.exists(animal_image_path):
        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = Image.open(animal_image_path)
            img = img.resize((800, 600))

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–≤–µ—Ä—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            d = ImageDraw.Draw(img)
            try:
                font = ImageFont.truetype("arial.ttf", 40)
            except:
                font = ImageFont.load_default()

            d.text((50, 20), "–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:", font=font, fill=(255, 255, 255))
            d.text((50, 70), animal_name, font=font, fill=(255, 215, 0))

            img_byte_arr = io.BytesIO()
            img.save(img_byte_arr, format='PNG')
            img_byte_arr.seek(0)
            return img_byte_arr
        except Exception as e:
            logging.error(f"Error loading animal image: {e}")

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–≤–æ–µ
    img = Image.new('RGB', (800, 600), color=(53, 119, 107))
    d = ImageDraw.Draw(img)
    try:
        font = ImageFont.truetype("arial.ttf", 40)
    except:
        font = ImageFont.load_default()

    d.text((100, 100), "–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ:", font=font, fill=(255, 255, 255))
    d.text((100, 200), animal_name, font=font, fill=(255, 215, 0))
    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG')
    img_byte_arr.seek(0)
    return img_byte_arr


@bot.message_handler(commands=['start'])
def welcome(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_data[message.chat.id] = {
        'answers': [],
        'current_question': 0,
        'name': message.from_user.first_name
    }

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'))
    markup.add(types.KeyboardButton('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'))

    bot.send_message(
      message.chat.id,
      f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n"
      "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.\n"
      "–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –∏ —è —Å–∫–∞–∂—É, –∫–∞–∫–æ–π –æ–±–∏—Ç–∞—Ç–µ–ª—å –∑–æ–æ–ø–∞—Ä–∫–∞ —Ç–µ–±–µ –±–ª–∏–∂–µ –≤—Å–µ–≥–æ!",
      reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text == '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ')
def about_program(message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ –æ–ø–µ–∫–∏"""
    bot.send_message(
        message.chat.id,
        "üêæ *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ–ø–µ–∫–∏ –Ω–∞–¥ –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å—Ç–∞—Ç—å –æ–ø–µ–∫—É–Ω–æ–º –æ–¥–Ω–æ–≥–æ –∏–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –∑–æ–æ–ø–∞—Ä–∫–∞, –ø–æ–º–æ–≥–∞—è –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –Ω–µ–º.\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã –∑–æ–æ–ø–∞—Ä–∫–∞:\n"
        "https://moscowzoo.ru/about/guardianship \n"
        "üìû +7 (962) 971-38-75\n"
        "üì© checking.notice.sf@yandex.ru",
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É')
def start_quiz(message):
    """–ù–∞—á–∞–ª–æ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã"""
    user_id = message.chat.id
    user_data[user_id]['current_question'] = 0
    user_data[user_id]['answers'] = []
    ask_question(message.chat.id)

def ask_question(chat_id):
    """–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    question_num = user_data[chat_id]['current_question']

    if question_num >= len(QUESTIONS):
      finish_quiz(chat_id)
      return

    question_data = QUESTIONS[question_num]
    question_text = list(question_data.keys())[0]
    options = list(question_data.values())[0]

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    for option in options:
        option_text = list(option.keys())[0]
        markup.add(types.KeyboardButton(option_text))

    bot.send_message(
        chat_id,
        f"–í–æ–ø—Ä–æ—Å {question_num + 1}/{len(QUESTIONS)}:\n{question_text}",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: True)
def handle_answer(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.chat.id
    if user_id not in user_data:
      return

    question_num = user_data[user_id]['current_question']
    if question_num >= len(QUESTIONS):
      return

    question_data = QUESTIONS[question_num]
    options = list(question_data.values())[0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–¥–Ω–æ–º—É –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    for option in options:
        if message.text in option:
            user_data[user_id]['answers'].append(option[message.text])
            user_data[user_id]['current_question'] += 1
            ask_question(user_id)
            return

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
    bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

def finish_quiz(chat_id):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    answers = user_data[chat_id]['answers']
    all_animals = [animal for sublist in answers for animal in sublist]

    if not all_animals:
      bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.")
      return

    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º–æ–µ —á–∞—Å—Ç–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ
    counter = Counter(all_animals)
    most_common = counter.most_common(1)[0][0]
    animal = ANIMALS.get(most_common)

    if not animal:
        bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ.")
        return

    animal_name = animal["name"]
    animal_image_path = animal.get("image")
    full_image_path = os.path.join("images", animal_image_path) if animal_image_path else None
    img = generate_animal_image(animal_name, full_image_path)

    # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è URL
    share_text = urllib.parse.quote(f"–ú–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - {animal_name}! –£–∑–Ω–∞–π –∏ —Å–≤–æ—ë!")
    bot.send_photo(
        chat_id,
        img,
        caption=f"üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!*\n\n–í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ - *{animal_name}*!\n\n"
                "–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ–± —ç—Ç–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º –∏–ª–∏ —Å—Ç–∞—Ç—å –µ–≥–æ –æ–ø–µ–∫—É–Ω–æ–º? "
                "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –∏–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à –∑–æ–æ–ø–∞—Ä–∫!",
        parse_mode="Markdown"
    )
    share_markup = types.InlineKeyboardMarkup()
    share_markup.add(
        types.InlineKeyboardButton(
            "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ",
            url=f"https://vk.com/share.php?url=https://t.me/ZooTotemBot&title={share_text}"
        )
    )
    bot.send_message(
        chat_id,
        "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –¥—Ä—É–∑—å—è–º –æ —Å–≤–æ–µ–º —Ç–æ—Ç–µ–º–Ω–æ–º –∂–∏–≤–æ—Ç–Ω–æ–º!",
        reply_markup=share_markup
    )

    restart_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    restart_markup.add(types.KeyboardButton('–ù–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É'))
    restart_markup.add(types.KeyboardButton('–û –ø—Ä–æ–≥—Ä–∞–º–º–µ'))
    bot.send_message(
        chat_id,
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –µ—â–µ —Ä–∞–∑?",
        reply_markup=restart_markup
    )

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
